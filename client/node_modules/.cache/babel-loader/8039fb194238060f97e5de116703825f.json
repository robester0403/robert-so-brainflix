{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Brainstation\\\\robert-so-brainflix\\\\src\\\\pages\\\\Home\\\\Home.jsx\";\nimport axios from 'axios';\nimport { Component } from 'react';\nimport Hero from '../../components/Hero/Hero';\nimport Main from '../../components/Main/Main';\nimport CommentsList from '../../components/CommentsList/CommentsList';\nimport NextList from '../../components/NextList/NextList';\nimport './Home.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://project-2-api.herokuapp.com\";\nconst API_KEY_STRING = \"?api_key=<78719564-cc2a-4348-85e3-b4d530c557d7>\";\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      selectedVideo: {}\n    };\n\n    this.getSelectedVideo = videoId => {\n      axios.get(`${API_URL}/videos/${videoId}${API_KEY_STRING}`).then(response => {\n        this.setState({\n          selectedVideo: response.data\n        });\n      }).catch(error => console.log(error));\n    };\n  }\n\n  // This runs perfectly so far with the home route. So loads whenever component home is called\n  componentDidMount() {\n    console.log(\"hello, this component has mounted\"); // getting the videos. this get line is actually pretty static\n\n    axios.get(`${API_URL}/videos${API_KEY_STRING}`).then(response => {\n      const videoId = this.props.match.params.videoId || response.data[0].id;\n      this.setState({\n        videos: response.data\n      });\n      this.getSelectedVideo(videoId);\n    }).catch(error => console.log(error));\n  } //once state is changed the first time, it will call on componentDidUpdate \n  //anytime state or props is changed again, componentDidUpdate will be called again \n  //so when we click on a new link the props.match.params.id is update and thus componentDidUpdate will be read once more\n  //componentDidUpdate has access to the previous props, which means it can compare the plantId from the URL before the user clicked on the link and after the user clicked on the link \n\n\n  componentDidUpdate(previousProps) {\n    const previousVideoId = previousProps.match.params.videoId;\n    const currentVideoId = this.props.match.params.videoId;\n    console.log(previousVideoId === currentVideoId);\n\n    if (previousVideoId !== currentVideoId) {\n      this.getSelectedVideo(currentVideoId);\n    }\n  }\n\n  render() {\n    // // cover all cases \n    // if (this.state.selectedVideo === null) {\n    //   return (0)};\n    const filteredList = this.state.videos.filter(response => response.id !== this.state.selectedVideo.id);\n    console.log(filteredList);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Hero, {\n        selectedVideo: this.state.selectedVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"article\", {\n          children: [/*#__PURE__*/_jsxDEV(Main, {\n            selectedVideo: this.state.selectedVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), this.state.selectedVideo.comments && /*#__PURE__*/_jsxDEV(CommentsList // note this one is a bit different because we are accessing a deeper level\n          , {\n            comments: this.state.selectedVideo.comments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"main-content__next-vid-box\",\n          children: this.state.videos && /*#__PURE__*/_jsxDEV(NextList // First we will try to load it with the entire array\n          , {\n            onVideoSelect: this.state.selectedVideo,\n            nextVideos: this.state.videos\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Projects/Brainstation/robert-so-brainflix/src/pages/Home/Home.jsx"],"names":["axios","Component","Hero","Main","CommentsList","NextList","API_URL","API_KEY_STRING","Home","state","videos","selectedVideo","getSelectedVideo","videoId","get","then","response","setState","data","catch","error","console","log","componentDidMount","props","match","params","id","componentDidUpdate","previousProps","previousVideoId","currentVideoId","render","filteredList","filter","comments"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { Component } from 'react';\r\nimport Hero from '../../components/Hero/Hero';\r\nimport Main from '../../components/Main/Main';\r\nimport CommentsList from '../../components/CommentsList/CommentsList';\r\nimport NextList from '../../components/NextList/NextList';\r\nimport './Home.scss';\r\n\r\nconst API_URL = \"https://project-2-api.herokuapp.com\" \r\nconst API_KEY_STRING = \"?api_key=<78719564-cc2a-4348-85e3-b4d530c557d7>\"\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    videos : [],\r\n    selectedVideo: {},\r\n  };\r\n\r\n  // this function will hold the get request to get a specific plant using the specific plant endpoint. we can call it at any time and must pass in the plantID\r\n  getSelectedVideo = (videoId) => {\r\n    axios.get(`${API_URL}/videos/${videoId}${API_KEY_STRING}`)\r\n  .then((response) => {\r\n    this.setState({\r\n      selectedVideo: response.data\r\n    })\r\n\r\n  })\r\n  .catch((error)=> console.log(error))\r\n}\r\n\r\n// This runs perfectly so far with the home route. So loads whenever component home is called\r\n  componentDidMount() {\r\n    console.log(\"hello, this component has mounted\")\r\n\r\n    // getting the videos. this get line is actually pretty static\r\n    axios.get(`${API_URL}/videos${API_KEY_STRING}`)\r\n    .then((response)=> {\r\n      const videoId = this.props.match.params.videoId || response.data[0].id;\r\n        this.setState({\r\n            videos: response.data\r\n        })\r\n        this.getSelectedVideo(videoId)\r\n    })\r\n    .catch((error)=> console.log(error) )\r\n  }\r\n\r\n    //once state is changed the first time, it will call on componentDidUpdate \r\n    //anytime state or props is changed again, componentDidUpdate will be called again \r\n    //so when we click on a new link the props.match.params.id is update and thus componentDidUpdate will be read once more\r\n\r\n    //componentDidUpdate has access to the previous props, which means it can compare the plantId from the URL before the user clicked on the link and after the user clicked on the link \r\n  componentDidUpdate(previousProps) {\r\n    const previousVideoId = previousProps.match.params.videoId\r\n    const currentVideoId = this.props.match.params.videoId\r\n\r\n    console.log(previousVideoId === currentVideoId)\r\n\r\n    if(previousVideoId !== currentVideoId) {\r\n        this.getSelectedVideo(currentVideoId) \r\n    }\r\n  }\r\n\r\n  render() {\r\n    // // cover all cases \r\n    // if (this.state.selectedVideo === null) {\r\n    //   return (0)};\r\n\r\n    const filteredList = this.state.videos.filter(response => response.id !== this.state.selectedVideo.id);\r\n    console.log(filteredList)\r\n\r\n    return (\r\n      <>\r\n        <Hero\r\n        selectedVideo={this.state.selectedVideo}\r\n        />\r\n        <section className=\"main-content\">\r\n          <article>\r\n            <Main\r\n              selectedVideo={this.state.selectedVideo}\r\n            />\r\n            {/* because if the state object is empty, it will evaluate to null which is falsey. \r\n            && will make it so that the javascript only runs CommentList if the state object is NOT falsey */}\r\n            {this.state.selectedVideo.comments && <CommentsList\r\n            // note this one is a bit different because we are accessing a deeper level\r\n                comments={this.state.selectedVideo.comments}\r\n            />}\r\n          </article>\r\n          <article className=\"main-content__next-vid-box\">\r\n            {this.state.videos && <NextList\r\n            // First we will try to load it with the entire array\r\n              onVideoSelect={this.state.selectedVideo}\r\n              nextVideos={this.state.videos}\r\n            /> }\r\n          </article>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}