{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Brainstation\\\\robert-so-brainflix\\\\src\\\\pages\\\\Home\\\\Home.jsx\";\nimport axios from 'axios';\nimport { Component } from 'react';\nimport Hero from '../../components/Hero/Hero';\nimport Main from '../../components/Main/Main';\nimport CommentsList from '../../components/CommentsList/CommentsList'; // import NextList from '../../components/NextList/NextList';\n\nimport './Home.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://project-2-api.herokuapp.com\";\nconst API_KEY_STRING = \"?api_key=<78719564-cc2a-4348-85e3-b4d530c557d7>\"; // Use get data to populate the state video\n// then default fill in selectedVid{}\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      selectedVideo: {}\n    };\n\n    this.getSelectedVideo = videoId => {\n      axios.get(`${API_URL}/videos/${videoId}${API_KEY_STRING}`).then(response => {\n        this.setState({\n          selectedVideo: response.data\n        });\n      }).catch(error => console.log(error));\n    };\n  }\n\n  // This runs perfectly so far with the home route. So loads whenever component home is called\n  componentDidMount() {\n    console.log(\"hello, this component has mounted\"); // getting the videos. this get line is actually pretty static\n\n    axios.get(`${API_URL}/videos${API_KEY_STRING}`).then(response => {\n      console.log(response.data);\n      this.setState({\n        videos: response.data\n      });\n      console.log(this.props.match.params.videoId); //This is my pain point this.props.match.params.videoId\n      //a variable called plantID that will be equal to the plant ID from the props.match.params.plantID \n      //if there is no props.match.params.plantID then we will default to the response.data[0].id\n\n      const videoId = this.props.match.params.videoId || response.data[0].id;\n      this.getSelectedVideo(videoId);\n    }).catch(error => console.log(error));\n  } //once state is changed the first time, it will call on componentDidUpdate \n  //anytime state or props is changed again, componentDidUpdate will be called again \n  //so when we click on a new link the props.match.params.id is update and thus componentDidUpdate will be read once more\n  //This is my next pain point\n  //componentDidUpdate has access to the previous props, which means it can compare the plantId from the URL before the user clicked on the link and after the user clicked on the link \n\n\n  componentDidUpdate(previousProps) {\n    const previousVideoId = previousProps.match.params.videoId;\n    const currentVideoId = this.props.match.params.videoId;\n    console.log(previousVideoId === currentVideoId); //we only want to make the axios call IF the previous plantID from the previous click is different than the new plantID from the new click \n\n    if (previousVideoId !== currentVideoId) {\n      //we will call our getSelectedPlant if it is true \n      this.getSelectedVideo(currentVideoId);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Hero, {\n        selectedVideo: this.state.selectedVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"article\", {\n          children: /*#__PURE__*/_jsxDEV(Main, {\n            selectedVideo: this.state.selectedVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"main-content__next-vid-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Projects/Brainstation/robert-so-brainflix/src/pages/Home/Home.jsx"],"names":["axios","Component","Hero","Main","CommentsList","API_URL","API_KEY_STRING","Home","state","videos","selectedVideo","getSelectedVideo","videoId","get","then","response","setState","data","catch","error","console","log","componentDidMount","props","match","params","id","componentDidUpdate","previousProps","previousVideoId","currentVideoId","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { Component } from 'react';\r\nimport Hero from '../../components/Hero/Hero';\r\nimport Main from '../../components/Main/Main';\r\nimport CommentsList from '../../components/CommentsList/CommentsList';\r\n// import NextList from '../../components/NextList/NextList';\r\nimport './Home.scss';\r\n\r\nconst API_URL = \"https://project-2-api.herokuapp.com\" \r\nconst API_KEY_STRING = \"?api_key=<78719564-cc2a-4348-85e3-b4d530c557d7>\"\r\n\r\n// Use get data to populate the state video\r\n// then default fill in selectedVid{}\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    videos : [],\r\n    selectedVideo: {},\r\n  };\r\n\r\n  // this function will hold the get request to get a specific plant using the specific plant endpoint. we can call it at any time and must pass in the plantID\r\n  getSelectedVideo = (videoId) => {\r\n    axios.get(`${API_URL}/videos/${videoId}${API_KEY_STRING}`)\r\n    .then((response) => {\r\n        this.setState({\r\n            selectedVideo: response.data\r\n        })\r\n    })\r\n    .catch((error)=> console.log(error))\r\n}\r\n\r\n// This runs perfectly so far with the home route. So loads whenever component home is called\r\n    componentDidMount() {\r\n        console.log(\"hello, this component has mounted\")\r\n\r\n        // getting the videos. this get line is actually pretty static\r\n        axios.get(`${API_URL}/videos${API_KEY_STRING}`)\r\n        .then((response)=> {\r\n            console.log(response.data)\r\n            this.setState({\r\n                videos: response.data\r\n            })\r\n            console.log(this.props.match.params.videoId)\r\n            //This is my pain point this.props.match.params.videoId\r\n            //a variable called plantID that will be equal to the plant ID from the props.match.params.plantID \r\n            //if there is no props.match.params.plantID then we will default to the response.data[0].id\r\n            const videoId = this.props.match.params.videoId || response.data[0].id\r\n\r\n            this.getSelectedVideo(videoId)\r\n        })\r\n        .catch((error)=> console.log(error) )\r\n    }\r\n\r\n    //once state is changed the first time, it will call on componentDidUpdate \r\n    //anytime state or props is changed again, componentDidUpdate will be called again \r\n    //so when we click on a new link the props.match.params.id is update and thus componentDidUpdate will be read once more\r\n\r\n    //This is my next pain point\r\n    //componentDidUpdate has access to the previous props, which means it can compare the plantId from the URL before the user clicked on the link and after the user clicked on the link \r\n    componentDidUpdate(previousProps) {\r\n        const previousVideoId = previousProps.match.params.videoId\r\n        const currentVideoId = this.props.match.params.videoId\r\n\r\n        console.log(previousVideoId === currentVideoId)\r\n\r\n        //we only want to make the axios call IF the previous plantID from the previous click is different than the new plantID from the new click \r\n        if(previousVideoId !== currentVideoId) {\r\n            //we will call our getSelectedPlant if it is true \r\n            this.getSelectedVideo(currentVideoId)\r\n        }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Hero\r\n        selectedVideo={this.state.selectedVideo}\r\n        />\r\n        <section className=\"main-content\">\r\n          <article>\r\n            <Main\r\n              selectedVideo={this.state.selectedVideo}\r\n            />\r\n            {/* <CommentsList\r\n            // note this one is a bit different because we are accessing a deeper level\r\n              comments={this.state.selectedVideo.comments}\r\n            /> */}\r\n          </article>\r\n          <article className=\"main-content__next-vid-box\">\r\n            {/* <NextList\r\n            // we will process this array later with filter\r\n              onVideoSelect={this.handleVideoSelect}\r\n              nextVideos={nextVidFilterArr}\r\n            />  */}\r\n          </article>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}